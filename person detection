import cv2
from tkinter import Tk, Label

# Function to create a popup using Tkinter
def show_popup(message):
    popup = Tk()
    popup.title("Alert")
    popup.geometry("300x100")
    label = Label(popup, text=message, font=("Arial", 14), fg="red")
    label.pack(pady=20)
    popup.after(3000, popup.destroy)  # Automatically close after 3 seconds
    popup.mainloop()

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Open the default camera
video_capture = cv2.VideoCapture(0)

# Check if the camera opened successfully
if not video_capture.isOpened():
    print("Error: Could not open the video capture.")
    exit()

print("Press 'q' to exit.")

# Real-time human detection loop
while True:
    # Capture the current frame
    ret, frame = video_capture.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.3,
        minNeighbors=5,
        minSize=(30, 30)
    )

    # Default message and color
    message = "No Human Detected"
    color = (0, 0, 255)  # Red for no face

    # Check the number of faces detected
    if len(faces) == 1:
        message = "One Human Detected"
        color = (0, 255, 0)  # Green for one face
        print(message)
    elif len(faces) > 1:
        message = "More than one Human Detected"
        color = (0, 0, 255)  # Red for multiple faces
        print(message)
        show_popup("More than one human detected")  # Trigger popup alert

    # Draw rectangles around detected faces and display the message
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)

    cv2.putText(frame, message, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    # Display the frame
    cv2.imshow("Human Detection", frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close windows
video_capture.release()
cv2.destroyAllWindows()
